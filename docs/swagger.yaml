definitions:
  models.TwUser:
    properties:
      calendarSettings:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      firstName:
        type: string
      googleId:
        type: string
      id:
        type: integer
      isActive:
        type: boolean
      isVerified:
        type: boolean
      lastLoginAt:
        type: string
      lastName:
        type: string
      locale:
        type: string
      notificationSettings:
        type: string
      profilePicture:
        type: string
      role:
        type: string
      timezone:
        type: string
      updated_at:
        type: string
    type: object
  transport.CreateUserEmailsResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.TwUser'
      user_id:
        type: integer
    type: object
  transport.GoogleAuthRequest:
    properties:
      credentials:
        type: string
    type: object
  transport.GoogleAuthResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      id_token:
        type: string
      is_new_user:
        type: boolean
      token_type:
        type: string
    type: object
info:
  contact: {}
  description: Timewise API
  title: timewise-api
  version: "1.0"
paths:
  /api/v1/auth/callback:
    post:
      consumes:
      - application/json
      description: Google callback
      parameters:
      - description: Google auth request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/transport.GoogleAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transport.GoogleAuthResponse'
      summary: Google callback
      tags:
      - auth
  /api/v1/user_email:
    post:
      consumes:
      - application/json
      description: Create new user email
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transport.CreateUserEmailsResponse'
      summary: Create new user email
      tags:
      - User Emails
swagger: "2.0"
